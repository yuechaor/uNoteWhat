(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{207:function(v,l,_){"use strict";_.r(l);var i=_(1),o=Object(i.a)({},(function(){var v=this,l=v.$createElement,_=v._self._c||l;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("docker 命令")]),v._v(" "),_("h2",{attrs:{id:"镜像和容器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#镜像和容器"}},[v._v("#")]),v._v(" 镜像和容器")]),v._v(" "),_("p",[v._v("容器是镜像的一个实例。 容器是用镜像创建的运行实例。它可以被启用，开始，停止，删除，每个容器都是相互隔离的，保证平台的安全。\n我们可以把容器看成一个简易版的linux环境，包括root用户权限，进程空间，用户空间和网络空间，还有运行在其中的应用程序。")]),v._v(" "),_("h2",{attrs:{id:"仓库repository"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#仓库repository"}},[v._v("#")]),v._v(" 仓库repository")]),v._v(" "),_("p",[v._v("仓库是集中"),_("strong",[v._v("存放镜像")]),v._v("文件的场所。")]),v._v(" "),_("p",[v._v("仓库和仓库注册服务器(Registry)是有区别的，仓库注册服务器上往往有多个仓库，每个仓库又还有多个镜像，每个镜像又有不同的tag。")]),v._v(" "),_("p",[v._v("仓库分为公开和私有")]),v._v(" "),_("p",[v._v("公开的 docker hub 阿里云，网易云。")]),v._v(" "),_("h2",{attrs:{id:"镜像，容器，仓库-相互关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#镜像，容器，仓库-相互关系"}},[v._v("#")]),v._v(" 镜像，容器，仓库 相互关系")]),v._v(" "),_("p",[v._v("Docker 本身是一个容器运行载体或称之为管理引擎。")]),v._v(" "),_("p",[v._v("我们把打包好的应用程序和环境配置依赖形成一个可交付的运行环境，这个打包好的运行环境就类似一个image镜像文件。")]),v._v(" "),_("p",[v._v("只有通过这个镜像文件才能生成docker容器，image文件可以看做是容器的模板，docker根据image文件生成一个容器实例或者多个实例。")]),v._v(" "),_("p",[v._v("image文件生成的容器实例，本身也是一个文件，称为镜像文件。")]),v._v(" "),_("p",[v._v("仓库可以用来存放镜像，需要的时候直接拉取。")]),v._v(" "),_("h2",{attrs:{id:"docker底层原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker底层原理"}},[v._v("#")]),v._v(" docker底层原理")]),v._v(" "),_("h3",{attrs:{id:"docker是怎么工作的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker是怎么工作的"}},[v._v("#")]),v._v(" docker是怎么工作的")]),v._v(" "),_("p",[v._v("docker 是一个CS结构的系统，docker守护进程运行在宿主机上（在执行service docker start或者systemctl start docker之后），然后通过socket连接从客户端访问，守护进程从客户端接收命令并管理主机上的容器，比如接收run命令etc 来运行容器等。")]),v._v(" "),_("h3",{attrs:{id:"为什么docker-比-vm-快"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么docker-比-vm-快"}},[v._v("#")]),v._v(" 为什么docker 比 vm 快")]),v._v(" "),_("ol",[_("li",[v._v("docker比虚拟机有更少的抽象层，不需要hypervisor来实现硬件资源虚拟化，运行在docker中的容器实例直接使用的是实际物理机的硬件资源。因此在cpu、内存利用率上 docker在效率上更有优势。")]),v._v(" "),_("li",[v._v("docker利用的是宿主机的内核，而不需要Guest OS。因此，当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核这个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的，而docker由于直接利用宿主机的操作系统，则省略了这个过程，只需要几秒钟的时间。")])]),v._v(" "),_("h3",{attrs:{id:"docker-安装以及阿里云镜像加速配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装以及阿里云镜像加速配置"}},[v._v("#")]),v._v(" docker 安装以及阿里云镜像加速配置")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("- 根据官网，根据不同系统版本来安装\n- 加速配置可参考阿里云或以下视频\n\n视频12：00处 [https://www.bilibili.com/video/av59639711/?p=9]\n")])])]),_("h2",{attrs:{id:"一般命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一般命令"}},[v._v("#")]),v._v(" 一般命令")]),v._v(" "),_("h3",{attrs:{id:"帮助命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#帮助命令"}},[v._v("#")]),v._v(" 帮助命令")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("- docker version\n- docker info\n- docker --help \n")])])]),_("h3",{attrs:{id:"镜像命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#镜像命令"}},[v._v("#")]),v._v(" 镜像命令")]),v._v(" "),_("p",[v._v("-docker images 列出所有镜像\n- a 列出全部镜像 "),_("strong",[v._v("含中间镜像层")]),v._v("\n- q 只显示全部镜像的id\n- qa 两者结合 返回ID\n- --digests 显示摘要信息\n- --no-trunc 显示完整的id 没有截取显示")]),v._v(" "),_("ul",[_("li",[v._v("docker search xxxx\n"),_("ul",[_("li",[v._v("-s 30 根据星数超过30来筛选")]),v._v(" "),_("li",[v._v("--no-trunc 显示完整的description")]),v._v(" "),_("li",[v._v("--automated 只列出自动构建类型的镜像")]),v._v(" "),_("li",[v._v("三个可以结合使用")])])]),v._v(" "),_("li",[v._v("docker pull xxx\n"),_("ul",[_("li",[v._v("docker pull xxx : 自定义tag名字")]),v._v(" "),_("li",[v._v("如果不带tag制定特定版本，默认就是latest的版本")])])]),v._v(" "),_("li",[v._v("docker rmi xxxx ：TAG\n"),_("ul",[_("li",[v._v("如果没有标识tag版本，默认删除最新的latest")]),v._v(" "),_("li",[v._v("-f 镜像名")]),v._v(" "),_("li",[v._v("-f 删除多个 镜像1：TAG 镜像2：TAG 镜像名中间加空格")]),v._v(" "),_("li",[v._v("删除全部 docker rmi -f $(docker images -qa)")])])])]),v._v(" "),_("h3",{attrs:{id:"容器命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#容器命令"}},[v._v("#")]),v._v(" 容器命令")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("新建一个容器实例并启动该容器")]),v._v(" "),_("ul",[_("li",[v._v("docker run [options] "),_("strong",[v._v("IMAGE")]),v._v("[COMMAND][ARG...]")]),v._v(" "),_("li",[v._v("options说明\n"),_("ul",[_("li",[v._v("有些是一个减号，有些是两个减号")])])]),v._v(" "),_("li",[v._v('--name="容器新名字":为容器指定一个名称')]),v._v(" "),_("li",[v._v("-d：后台运行容器，并返回容器id，即启动守护式容器；")]),v._v(" "),_("li",[v._v("-i: 以交互模式运行容器，通常与-t一起使用;")]),v._v(" "),_("li",[v._v("-t: 为容器重新分配一个伪输入终端，通常与-i一起使用; 例如： docker run -it IMAGEid")]),v._v(" "),_("li",[v._v("-P： 大P是随机分配端口映射;")]),v._v(" "),_("li",[v._v("-p：指定端口映射，有以下四种格式\n"),_("ul",[_("li",[v._v("ip:hostPort:containerPort")]),v._v(" "),_("li",[v._v("ip::containerPort")]),v._v(" "),_("li",[v._v("hostPort:containerPort")]),v._v(" "),_("li",[v._v("containerPort")])])])])]),v._v(" "),_("li",[_("p",[v._v("列出当前所有"),_("strong",[v._v("正在运行")]),v._v("的容器")]),v._v(" "),_("ul",[_("li",[v._v("docker ps  （Process Status）\n"),_("ul",[_("li",[v._v("options说明\n"),_("ul",[_("li",[v._v("-a: 列出当前所有正在运行的容器+历史上运行过的")]),v._v(" "),_("li",[v._v("-l:显示最近创建的容器 last")]),v._v(" "),_("li",[v._v("-n: 显示最近n个创建的容器 例如 docker ps -n 3 列出上三次运行过的容器")]),v._v(" "),_("li",[v._v("-q: 静默模式，只显示容器ID quiet。例如 docker ps -lq")]),v._v(" "),_("li",[v._v("--no-trunc: 不截断输出")])])])])])])]),v._v(" "),_("li",[_("p",[v._v("退出容器")]),v._v(" "),_("ul",[_("li",[v._v("两种方式\n"),_("ul",[_("li",[v._v("exit 容器停止退出")]),v._v(" "),_("li",[v._v("ctrl+p+q 容器不停止退出")])])])])]),v._v(" "),_("li",[_("p",[v._v("启动容器")]),v._v(" "),_("ul",[_("li",[v._v("docker start 容器ID或者容器名")])])]),v._v(" "),_("li",[_("p",[v._v("重启容器")]),v._v(" "),_("ul",[_("li",[v._v("docker restart 容器ID或者容器名")])])]),v._v(" "),_("li",[_("p",[v._v("缓慢停止容器")]),v._v(" "),_("ul",[_("li",[v._v("docker stop 容器ID或者容器名")])])]),v._v(" "),_("li",[_("p",[v._v("强制停止容器")]),v._v(" "),_("ul",[_("li",[v._v("docker kill 容器ID或者容器名")])])]),v._v(" "),_("li",[_("p",[v._v("删除已停止的容器")]),v._v(" "),_("ul",[_("li",[v._v("删除在缓存中已停止的容器")]),v._v(" "),_("li",[v._v("docker rm 容器ID或者容器名\n"),_("ul",[_("li",[v._v("可加 -f")])])]),v._v(" "),_("li",[v._v("一次性删除多个容器\n"),_("ul",[_("li",[v._v("docker rm -f $(docker ps -aq)")]),v._v(" "),_("li",[v._v("docker ps -aq | xargs docker rm\n"),_("ul",[_("li",[v._v("xargs 会提取 | 前面的命令的结果 作为参数")])])])])])])])]),v._v(" "),_("p",[_("strong",[v._v("重点")])]),v._v(" "),_("ol",[_("li",[v._v("启动守护式容器\n"),_("ul",[_("li",[v._v("docker run -d 容器名\n"),_("ul",[_("li",[v._v("docker ps 并不会显示这个daemon容器，显示容器已经退出了")]),v._v(" "),_("li",[v._v("原因：这是docker的机制，很重要的说明的一点，docker容器后台运行，就必须有一个前台进程来持续调用这个容器，容器运行的命令"),_("strong",[v._v("如果不是那些一直挂起的命令")]),v._v("，比如运行top，tail，就是会自动退出的。")]),v._v(" "),_("li",[v._v("这个是docker的机制问题，比如你的web容器，我们以nginx为例，正常情况下，我们配置启动服务只需要启动响应的service即可。例如service nginx start，")]),v._v(" "),_("li",[v._v("但是这样做，nginx为后台进程模式运行，就导致docker前台没有运行的应用，这样容器后台启动后，会立即自杀因为它觉得它没事可做了。")]),v._v(" "),_("li",[v._v("所以，最佳的解决方案是，将你要运行的程序以前台进程的形式运行。")]),v._v(" "),_("li",[v._v("使用命令是程序在后台保持运行")]),v._v(" "),_("li")])])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v('docker run -d centos /bin/sh -c "while true; do echo hello world!; sleep 2; done"\n')])])])]),v._v(" "),_("li",[v._v("查看容器日志\n"),_("ul",[_("li",[v._v("docker logs -f -t -tail 容器ID\n"),_("ul",[_("li",[v._v("-t 加入时间戳")]),v._v(" "),_("li",[v._v("-f 跟随最新的日志打印")]),v._v(" "),_("li",[v._v("-tail 3 加数字 显示最后多少条")])])])])]),v._v(" "),_("li",[v._v("查看容器运行的进程\n"),_("ul",[_("li",[v._v("docker top 容器ID")])])]),v._v(" "),_("li",[v._v("查看容器内部的细节\n"),_("ul",[_("li",[v._v("docker inspect 容器ID\n"),_("ul",[_("li",[v._v("返回当前容器的结构细节")]),v._v(" "),_("li",[v._v("以json的形式")])])])])]),v._v(" "),_("li",[v._v("再次进入正在运行的容器并以命令行交互\n"),_("ul",[_("li",[v._v("attach 和 exec 区别：\n"),_("ul",[_("li",[v._v("docker exec -it "),_("strong",[v._v("ID")]),v._v(" 再加执行命令\n"),_("ul",[_("li",[v._v("可以不进入容器，但在容器中打开终端并执行命令和启动进程。")]),v._v(" "),_("li",[v._v("例如：docker exec -it xxxx ls -l /tmp\n"),_("ul",[_("li",[v._v("结果是直接列出tmp文件夹信息，"),_("strong",[v._v("但是并不进入容器")])]),v._v(" "),_("li",[v._v("docker exec -it xxxx /bin/bash\n"),_("ul",[_("li",[v._v("结果跟 docker attach xxx 效果一样")])])])])])])]),v._v(" "),_("li",[v._v("docker attach "),_("strong",[v._v("ID")]),v._v(" "),_("ul",[_("li",[v._v("直接进去容器并启动命令终端，不涉及执行新的命令和进程。")])])])])])])]),v._v(" "),_("li",[v._v("从容器内拷贝文件到主机上\n"),_("ul",[_("li",[v._v("从集装箱容器内里面拷贝数据到宿主机")]),v._v(" "),_("li",[v._v("docker cp ID:要拷贝的路径 目的宿主机路径")]),v._v(" "),_("li",[v._v("docker cp ID:/tmp/yum.log /root")])])])]),v._v(" "),_("h2",{attrs:{id:"docker-镜像"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像"}},[v._v("#")]),v._v(" docker 镜像")]),v._v(" "),_("ol",[_("li",[v._v("是什么：\n"),_("ul",[_("li",[v._v("镜像是一种轻量级、可执行的独立软件包，用来"),_("strong",[v._v("打包软件运行环境和基于运行环境开发的软件")]),v._v("，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。")]),v._v(" "),_("li",[v._v("UnionFS 联合文件系统\n"),_("ul",[_("li",[v._v("是一种分层的、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下，"),_("strong",[v._v("它是docker镜像的基础")]),v._v(" 镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。\n"),_("ul",[_("li",[v._v("特性：\n"),_("ul",[_("li",[v._v("一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。")])])])])])])]),v._v(" "),_("li",[v._v("Docker 镜像加载原理\n"),_("ul",[_("li",[v._v("docker的镜像实际上是由一层层的文件系统组成，这种层级的文件系统就是UnionFS")]),v._v(" "),_("li",[v._v("bootfs boot file system 主要包含bootloader和kernel。\n"),_("ul",[_("li",[v._v("bootloader的作用是引导加载kernel，linux刚启动时会加载bootfs文件系统，在docker镜像的最底层bootfs。这一层与我们典型的linux\\unix系统是一样的，包含boot加载器和内核。 当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。")]),v._v(" "),_("li",[v._v("rootfs root file system， 在bootfs之上，包含的就是典型linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，centos等。")]),v._v(" "),_("li",[v._v("为什么docker里面的linux镜像很小？")]),v._v(" "),_("li",[v._v("因为对于一个精简的OS,rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了。因为底层直接用host的kernel，自己只需要提供rootfs就可以了。 而对于bootfs，不同linux发行版可以公用bootfs，只有rootfs会有差别。")])])])])]),v._v(" "),_("li",[v._v("分层的镜像\n"),_("ul",[_("li",[v._v("每个镜像都是分层的，在pull的过程中可以看到是一层层的在下载。")])])]),v._v(" "),_("li",[v._v("为什么docker镜像要采用这种分层结构呢\n"),_("ul",[_("li",[v._v("最大的好处就是--可以共用资源，节省资源")]),v._v(" "),_("li",[v._v("比如，很多镜像都是从相同的base镜像构建而来的，那么host只需要在磁盘上保存一份base镜像，同时内存中也只需要加载一份base镜像，就可以为所有容器服务了，而且镜像的每一层都可以被共享。")])])])])]),v._v(" "),_("li",[v._v("特点")])]),v._v(" "),_("ul",[_("li",[v._v("Docker镜像都是只读的")]),v._v(" "),_("li",[v._v("当容器启动时，一个新的可写层被加载到镜像的顶部")]),v._v(" "),_("li",[v._v("这一层通常被称作为 "),_("strong",[v._v("容器层")]),v._v("，容器层之下的都叫 "),_("strong",[v._v("镜像层")])])]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[v._v("docker 镜像commit操作补充\n"),_("ul",[_("li",[v._v("docker commit 提交容器副本使之成为一个镜像，我们在自定义配置容器之后，为方便使用可以做成镜像，以备下次使用。")]),v._v(" "),_("li",[v._v('docker commit -m="描述信息" -a="author" 容器ID 新建目标镜像名称：[Tags]标签名\n'),_("ul",[_("li",[v._v('docker commit -m="updates" -a="ryc" xxxxx newVersion:v_1')])])]),v._v(" "),_("li")])])]),v._v(" "),_("h2",{attrs:{id:"docker-容器数据卷"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器数据卷"}},[v._v("#")]),v._v(" Docker 容器数据卷")]),v._v(" "),_("ol",[_("li",[v._v("是什么\n"),_("ul",[_("li",[v._v("目的是将容器运行产生的数据持久化保存下来")]),v._v(" "),_("li",[v._v("希望容器之间有可能共享数据")]),v._v(" "),_("li",[v._v("docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据作为镜像的一部分保存下来，那么当容器删除后，数据自然就没有了。")]),v._v(" "),_("li",[v._v("为了能保存数据在docker中，我们使用卷")]),v._v(" "),_("li",[v._v("卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过unionFS提供一些用于持续存储或共享数据的特性")]),v._v(" "),_("li",[v._v("卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会再容器删除时删除其挂载的数据卷")]),v._v(" "),_("li",[v._v("特点\n"),_("ul",[_("li",[v._v("数据卷可在容器之间共享或重用数据")]),v._v(" "),_("li",[v._v("卷中的更改可以直接生效")]),v._v(" "),_("li",[v._v("数据卷中的更改不会包含在镜像的更新中")]),v._v(" "),_("li",[v._v("数据卷的生命周期一直持续到没有容器使用它为止。")])])])])]),v._v(" "),_("li",[v._v("能干嘛\n"),_("ul",[_("li",[v._v("容器的持久化")]),v._v(" "),_("li",[v._v("容器间继承+共享数据")])])])]),v._v(" "),_("ul",[_("li")]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("p",[v._v("数据卷实际操作\n添加数据卷有两种方式：直接命令添加 && DockerFile添加")]),v._v(" "),_("ol",[_("li",[v._v("直接命令添加")])]),v._v(" "),_("blockquote",[_("p",[v._v("docker run -it -v /宿主机绝对路径目录:/容器内目录 镜像名\ndocker run -it -v /myDataVolume:/dataVolumeContainer xxxx")])]),v._v(" "),_("ul",[_("li",[v._v("查看数据卷是否挂载成功")])]),v._v(" "),_("blockquote",[_("p",[v._v("docker inpect 查看binds")])]),v._v(" "),_("ul",[_("li",[v._v("容器和宿主机直接数据共享\n"),_("ul",[_("li",[v._v("myDataVolum 和 dataVolumeContainer 文件夹现已经成为共享文件夹了，在一个中增减改删，另外一个也会同步。")])])]),v._v(" "),_("li",[v._v("容器停止退出后，主机修改后数据是否同步\n"),_("ul",[_("li",[v._v("答案是完全同步。")])])]),v._v(" "),_("li",[v._v("命令（带权限）增改权限")])]),v._v(" "),_("blockquote",[_("p",[v._v("docker run -it -v /myDataVolume:/dataVolumeContainer:ro xxxx\n"),_("strong",[v._v("ro:")]),v._v(" read only 只允许主机单向修改，容器端是ro")])]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("rw:")]),v._v(" read write")])]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("dockerFile 添加")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("根目录下新建mydocker文件夹并进入")])]),v._v(" "),_("li",[_("p",[v._v("可在dockerFile中使用"),_("strong",[v._v("VOLUME")]),v._v("指令来给镜像添加一个或多个数据卷")])]),v._v(" "),_("li",[_("p",[v._v("file构建")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v('# volume test\nFROM centos\nVOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]\nCMD echo "finished, -------success"\nCMD /bin/bash\n')])])])]),v._v(" "),_("li",[_("p",[v._v("build后生成镜像")]),v._v(" "),_("ul",[_("li",[_("blockquote",[_("p",[v._v("docker build -f /myDocker/Dockerfile -t xxx/centos .")])])]),v._v(" "),_("li",[v._v("获得一个新镜像 xxx/centos")])])]),v._v(" "),_("li",[_("p",[v._v("run容器")])]),v._v(" "),_("li",[_("p",[v._v("通过上述步骤，容器内的卷目录地址已经知道对应的主机目录地址哪")]),v._v(" "),_("ul",[_("li",[v._v("宿主机会随机生成对应的目录")]),v._v(" "),_("li",[v._v("可以通过docker inspect来查看")])])]),v._v(" "),_("li",[_("p",[v._v("主机对应默认地址")])])])]),v._v(" "),_("li",[_("p",[v._v("数据卷容器")])])]),v._v(" "),_("ul",[_("li",[v._v("是什么\n"),_("ul",[_("li",[v._v("命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，称之为数据卷容器")]),v._v(" "),_("li",[v._v("总体介绍\n"),_("ul",[_("li",[v._v("以上一步新建的镜像xxx/centos为模板并运行三个容器 dc1、dc2、dc3")]),v._v(" "),_("li",[v._v("这三个模板由于都继承于xxx/centos,所以都已经具有容器卷dataVolumeContainer1、dataVolumeContainer2")]),v._v(" "),_("li",[v._v("以这三个容器为基本来判断一下容器间传递共享(--volumes-from)\n"),_("ul",[_("li",[_("p",[v._v("先启动一个父容器dc1，并在dataVolumeContainer2中新增内容hello.txt")]),v._v(" "),_("ul",[_("li",[_("blockquote",[_("p",[v._v("docker run -it --name dc1 xxx/centos")])])]),v._v(" "),_("li",[v._v("进入dataVolumeContainer2中新建hello.txt文件")]),v._v(" "),_("li",[_("blockquote",[_("p",[v._v("touch hello.txt")])])])])]),v._v(" "),_("li",[_("p",[v._v("使用命令--volumes-from创建dc2、dc3")])])]),v._v(" "),_("blockquote",[_("p",[v._v("docker run -it --name dc2 --volumes-from dc1 xxx/centos\ndocker run -it --name dc3 --volumes-from dc1 xxx/centos")])]),v._v(" "),_("ul",[_("li",[v._v("这样dc2 和dc3 都继承于dc1 所以他们的dataVolumeContainer2目录中都会有hello.txt文件")]),v._v(" "),_("li",[_("strong",[v._v("在子类中添加、删除新文件 父类和其他子类也会同步")]),v._v("，父到子，子到父都可以同步")]),v._v(" "),_("li",[v._v("删除dc1，dc2修改后dc3是否可以访问？\n"),_("ul",[_("li",[v._v("删除父类容器dc1，dc2和dc3中的数据也不会受到影响。")])])]),v._v(" "),_("li",[v._v("即使删除父类容器dc1了，dc2和dc3中的数据也可以同步")]),v._v(" "),_("li",[_("strong",[v._v("总结：")]),v._v(" 容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止。直到所有xxx/centos容器死绝为止")])])])])])])])]),v._v(" "),_("h2",{attrs:{id:"dockerfile-解析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-解析"}},[v._v("#")]),v._v(" dockerfile 解析")]),v._v(" "),_("ol",[_("li",[v._v("思考并回顾一下，用dockerfile写容器卷的主流步骤有哪些？\n"),_("ol",[_("li",[v._v("手动编写一个dockerfile，按照语义规范来写")]),v._v(" "),_("li",[v._v("有了这个文件后，用了docker build命令执行 生成一个自定义的镜像")]),v._v(" "),_("li",[v._v("run 使用该镜像来直接生成容器，并使用--volumes-from来继承父类容器的共享目录")])])]),v._v(" "),_("li",[v._v("是什么\n"),_("ol",[_("li",[v._v("dockerfile是用来构建docker镜像的构建文件，是由一系列命令和参数构成的脚本\n"),_("ol",[_("li",[v._v("其实就是通过自定义一个脚本文件来构建docker镜像。")])])]),v._v(" "),_("li",[v._v("构建三步骤\n"),_("ol",[_("li",[v._v("编写dockerfile")]),v._v(" "),_("li",[v._v("docker build")]),v._v(" "),_("li",[v._v("docker run")])])]),v._v(" "),_("li",[v._v("文件什么样子？\n"),_("ol",[_("li",[v._v("可以去hub.docker 查看")])])])])]),v._v(" "),_("li",[v._v("dockerfile构建过程解析\n"),_("ol",[_("li",[v._v("dockerfile内容基础知识\n"),_("ol",[_("li",[v._v("每条保留字指令都必须为大写字母，且后面要跟随至少一个参数")]),v._v(" "),_("li",[v._v("指令按照从上到下，顺序执行")]),v._v(" "),_("li",[v._v("#表示注释")]),v._v(" "),_("li",[v._v("每条指令都会创建一个新的镜像层，并对镜像进行提交（花卷包裹理论）")])])]),v._v(" "),_("li",[v._v("docker 执行dockerfile的大致流程\n"),_("ol",[_("li",[v._v("docker从基础镜像运行一个容器，一定要有一个基础镜像")]),v._v(" "),_("li",[v._v("执行一条指令并对容器做出修改")]),v._v(" "),_("li",[v._v("执行类似docker commit的操作提交一个新的镜像层")]),v._v(" "),_("li",[v._v("docker再基于刚提交的镜像运行一个新的容器，层层包裹。")]),v._v(" "),_("li",[v._v("执行dockerfile的下一条指令，并循环到所有执行执行完成。")])])]),v._v(" "),_("li",[v._v("小总结：\n"),_("ol",[_("li",[v._v("从应用软件的角度来看，dockerfile、docker镜像、docker容器分别代表软件的三个不同阶段。")])]),v._v(" "),_("ul",[_("li",[v._v("dockerfile是软件的原材料")]),v._v(" "),_("li",[v._v("docker镜像是软件的交付品")]),v._v(" "),_("li",[v._v("docker容器可以认为是软件的运行态")]),v._v(" "),_("li",[v._v("dockerfile面向开发，docker镜像成为交付标准，docker容器则涉及部署与运维，三者缺一不可，为docker体系的基石。")]),v._v(" "),_("li",[v._v("dockerfile定义了进程需要的一切东西。 dockerfile涉及的内容包括 "),_("strong",[v._v("执行代码或是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程等等")])])])])])]),v._v(" "),_("li",[v._v("dockerfile体系结构("),_("strong",[v._v("保留字指令")]),v._v(")\n"),_("ol",[_("li",[v._v("FROM\n"),_("ul",[_("li",[v._v("基础镜像，当前新镜像是基于哪个镜像的")])])]),v._v(" "),_("li",[v._v("MAINTAINER\n"),_("ul",[_("li",[v._v("镜像维护者的姓名和邮箱地址")])])]),v._v(" "),_("li",[v._v("RUN\n"),_("ul",[_("li",[v._v("容器构建时需要运行的命令")])])]),v._v(" "),_("li",[v._v("EXPOSE\n"),_("ul",[_("li",[v._v("当前容器对外暴露出的端口")])])]),v._v(" "),_("li",[v._v("WORKDIR\n"),_("ul",[_("li",[v._v("指定在创建容器后，终端默认登录的进来时的工作目录，落脚点")])])]),v._v(" "),_("li",[v._v("ENV\n"),_("ul",[_("li",[v._v("用来在构建镜像过程中设置环境变量")])])]),v._v(" "),_("li",[v._v("ADD")])]),v._v(" "),_("ul",[_("li",[v._v("将宿主机目录下的文件拷贝到镜像且ADD命令会自动处理URL和解压tar压缩包")])]),v._v(" "),_("ol",{attrs:{start:"8"}},[_("li",[v._v("COPY\n"),_("ul",[_("li",[v._v("类似ADD，拷贝文件和目录到镜像中。")]),v._v(" "),_("li",[v._v("两种写法\n"),_("ul",[_("li",[v._v("COPY src dest")]),v._v(" "),_("li",[v._v('COPY["src","dest"]')])])])])]),v._v(" "),_("li",[v._v("VOLUME")])]),v._v(" "),_("ul",[_("li",[v._v("容器数据卷，用于保存和持久化数据")])]),v._v(" "),_("ol",{attrs:{start:"10"}},[_("li",[v._v("CMD")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("指定一个容器启动时要运行的命令")]),v._v(" 注意和ENTRYPOINT概念区分")]),v._v(" "),_("li",[v._v("dockerfile中可以有多个CMD指令，但只有最后一个生效，如果在执行docker run时有额外的命令，"),_("strong",[v._v("dockfile里面的最后一个CMD会被docker run 之后的命令替换")])]),v._v(" "),_("li",[v._v("CMD 指令的格式和RUN相似，也是两种格式：\n"),_("ul",[_("li",[v._v("shell 格式 CMD <命令>")]),v._v(" "),_("li",[v._v('exec 格式 CMD ["可执行文件","参数1","参数2",....]\n'),_("ul",[_("li",[v._v('参数列表格式： CMD ["参数1","参数2",....]，在指定了ENTRYPOINT指令后，用CMD指定具体的参数')])])])])])]),v._v(" "),_("ol",{attrs:{start:"11"}},[_("li",[v._v("ENTRYPOINT")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("指定一个容器启动时要运行的命令")])]),v._v(" "),_("li",[v._v("目的和CMD一样，都是在指定容器启动程序及参数。")]),v._v(" "),_("li",[v._v("不会被覆盖，docker run 之后的参数命令会被传递给ENTRYPOINT,成为追加命令组合。")]),v._v(" "),_("li",[_("strong",[v._v("区别CMD和ENTRYPOINT案例")]),v._v(" "),_("ul",[_("li",[v._v("制作CMD版可以查询ip信息的容器")])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v('FROM centos\nRUN yum install -y curl\nCMD ["curl","-s","http://ip.cn"]\n//再执行docker build\ndocker build -f /mydocker/Dockerfile3 -t myip .\n')])])]),_("ul",[_("li",[v._v("问题\n"),_("ul",[_("li",[v._v("-s 是显示ip地址")]),v._v(" "),_("li",[v._v("-i 是为了显示http头信息")]),v._v(" "),_("li",[v._v("但是直接在docker run 里面加 -i的话 会覆盖 -s 那个命令")]),v._v(" "),_("li",[v._v("所以返回的结果会有错误。")])])]),v._v(" "),_("li",[v._v("为什么")]),v._v(" "),_("li",[v._v("制作ENTRYPOINT版查询ip信息的容器")])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v('FROM centos\nRUN yum install -y curl\nENTRYPOINT ["curl","-s","http://ip.cn"]\n//再执行docker build\ndocker build -f /mydocker/Dockerfile4 -t myip .\n')])])]),_("ul",[_("li",[v._v("此时在docker run里面加 -i 就会成为追加命令，不会覆盖 -s 命令。")])])])]),v._v(" "),_("ol",{attrs:{start:"12"}},[_("li",[v._v("ONBUILD")])]),v._v(" "),_("ul",[_("li",[v._v("类似一个触发器")]),v._v(" "),_("li",[v._v("当构建一个被继承的dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发")]),v._v(" "),_("li",[v._v("子镜像在构建时，会触发父镜像中的onbuild之后的 命令。")])]),v._v(" "),_("ol",{attrs:{start:"13"}},[_("li",[v._v("小总结：")])])]),v._v(" "),_("li",[v._v("案例\n"),_("ul",[_("li",[_("strong",[v._v("Base镜像(scratch)")]),v._v(": docker hub中99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的")]),v._v(" "),_("li",[_("strong",[v._v("自定义镜像mycentos")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("编写")]),v._v(" "),_("ul",[_("li",[v._v("hub默认centos镜像是什么情况")]),v._v(" "),_("li",[v._v("准备编写dockerfile文件")]),v._v(" "),_("li",[v._v("mycentos内容dockerfile")])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("FROM centos\nMAINTAINER yuechaor@gmail.com\n\nENV MYPATH /usr/local\nWORKDIR $MYPATH\n\nRUN yum -y install vim\nRUN yum -y install net-tools\n\nEXPOSE 80\n\nCMD /bin/bash\n")])])]),_("ul",[_("li",[v._v("更改了路径落脚点")]),v._v(" "),_("li",[v._v("安装了vim和net tool")])])]),v._v(" "),_("li",[_("p",[v._v("构建")]),v._v(" "),_("ul",[_("li",[v._v("docker build -f /mydocker/Dockerfile2 -t mycentos: 1.0")])])]),v._v(" "),_("li",[_("p",[v._v("运行")])]),v._v(" "),_("li",[_("p",[v._v("列出镜像的变更历史")]),v._v(" "),_("ul",[_("li",[v._v("docker history imageID")])])])])]),v._v(" "),_("li",[_("strong",[v._v("自定义镜像tomcat")]),v._v(" "),_("ol",[_("li",[v._v("mkdir -p /xxx/mydockerfile/tomcat9")]),v._v(" "),_("li",[v._v("在上述目录下touch c.txt 目的是为了演示copy的命令。")]),v._v(" "),_("li",[v._v("将jdk和tomcat安装的压缩包拷贝到该目录，目的是为了演示add命令")]),v._v(" "),_("li",[v._v("在该目录下新建Dockerfile文件")])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("FROM  centos\nMAINTAINER ryc<yuechao@gmail.com>\n#从host 拷贝到 容器/usr/local/\nCOPY c.txt /usr/local/cincontainer.txt\n#添加java和tomcat压缩包到容器\nADD jdk-sxxxx.tar.gz /usr/local/\nADD tomcat-sxxxx.tar.gz /usr/local/\nRUN yum -y install vim\nWORKDIR $MYPATH\nENV MYPATH /usr/local\n\n#配置环境变量\nENV JAVA_HOME /usr/local/jdk1.8.0.171\n ....\n#容器运行时监听的端口\nEXPOSE 8080\n\nCMD /usr/local/apache-tomcat/bin/startup.sh && tail -F /usr/loal/apache-tomcat/bin/logs/catalina.out\n")])])]),_("ol",[_("li",[v._v("构建")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("docker build . dot 怎么理解")])]),v._v(" "),_("li",[v._v("当我们使用docker build来构建镜像时，这个构建过程是在daemon中进行的，而不是本地client，所以这个dot就是为了将构建所需的当前目录下的文件 以上下文build context的形式传送到daemon中，用于构建镜像。")])]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("run")])]),v._v(" "),_("ul",[_("li",[_("blockquote",[_("p",[v._v("docker run -d -p 9999:8080 --name myTomcat9 -v /xxx/mydockerfile/tomcat9/test: /usr/local/apache-tomcat-9.0.8/webapps/test -v /xxx/mydockerfile/tomcat9/tomcat9logs: /usr/local/apache-tomcat-9.0.8/webapps/logs xxxtomcat9")])])])]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[v._v("验证")]),v._v(" "),_("li",[v._v("结合前述的容器卷将测试的web服务test发布")])]),v._v(" "),_("ul",[_("li",[v._v("因此前创建了容器卷，所以我们可以直接在host中对应的test文件夹中部署apps或者查看日志，"),_("strong",[v._v("这样容器中对应的文件夹目录也会同步")])])])])])])]),v._v(" "),_("h2",{attrs:{id:"docker常用安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker常用安装"}},[v._v("#")]),v._v(" Docker常用安装")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("总体步骤")])]),v._v(" "),_("li",[_("p",[v._v("安装tomcat")])]),v._v(" "),_("li",[_("p",[v._v("安装mysql")]),v._v(" "),_("ol",[_("li",[v._v("docker search mysql")]),v._v(" "),_("li",[v._v("docker pull mysql：5.6")])])]),v._v(" "),_("li",[_("p",[v._v("安装redis")])])]),v._v(" "),_("h2",{attrs:{id:"提交镜像到云端（阿里云）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提交镜像到云端（阿里云）"}},[v._v("#")]),v._v(" 提交镜像到云端（阿里云）")]),v._v(" "),_("ol",[_("li",[v._v("本地镜像发布到阿里云流程\n"),_("ol",[_("li",[v._v('镜像生成方法：docker commit -a yuechao -m "new image" imageID  newImageName:tag')])])]),v._v(" "),_("li",[v._v("将本地镜像推送到阿里云：阿里云开发者平台有相关步骤 如何设置和执行命令\n"),_("ol",[_("li",[v._v("本地镜像素材原型")]),v._v(" "),_("li",[v._v("阿里云开发者平台")]),v._v(" "),_("li",[v._v("创建仓库镜像")]),v._v(" "),_("li",[v._v("将镜像推送到registry")]),v._v(" "),_("li",[v._v("公有云可以查询到")])])]),v._v(" "),_("li",[v._v("之后就可以将阿里云上的镜像下载到本地使用了。")])])])}),[],!1,null,null,null);l.default=o.exports}}]);